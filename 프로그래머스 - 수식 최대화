//https://ddsiq.tistory.com/69
//https://programmers.co.kr/learn/courses/30/lessons/67257

import java.util.*;
class Solution {
    static long answer = 0; 
    public long solution(String expression) {
               
        char[] Op = { '*' , '+' , '-' };
        boolean[] visited = new boolean[ Op.length ];
        perm( Op, visited, 0 , new char[3] , expression );
        return answer;
    }
    static void perm( char[] Op , boolean[] visited , int depth , char[] output , String expression ){
        if( depth == 3 ) Calc( output , expression );
        for( int i = 0 ; i < Op.length ; i++ ){
            if( !visited[i] ){
                visited[i] = true;
                output[depth] = Op[i];
                perm( Op, visited , depth + 1 , output , expression );
                visited[i] = false;
            }
        }
    }
    static void Calc( char[] output , String expression ){
        List<Long> nums = new LinkedList<>();
        List<Character> Ops = new LinkedList<>();
        StringBuilder sb = new StringBuilder();
        for( int i = 0 ; i < expression.length() ; i++ ){            
            if( expression.charAt( i ) == '+' || expression.charAt( i ) == '-' || expression.charAt( i ) == '*') {
                Ops.add( expression.charAt( i ) );
                nums.add( Long.parseLong( sb.toString() ) ); 
                sb = new StringBuilder();                
            } else {                
                sb.append( String.valueOf( expression.charAt( i ) ) );                
            }
        }
        nums.add( Long.parseLong( sb.toString() ) );
        
        for( int i = 0 ; i < output.length ; i++ ){
            while( Ops.indexOf( output[i] ) != -1 ){
                int idx = Ops.indexOf( output[i] );                
                if( output[i] == '+' ) nums.set( idx , nums.get( idx ) + nums.get( idx + 1 ) );
                else if ( output[i] == '-' ) nums.set( idx , nums.get( idx ) - nums.get( idx + 1 ) );
                else nums.set( idx , nums.get( idx ) * nums.get( idx + 1 ) );
                nums.remove( idx + 1 );
                Ops.remove( idx );                
            }
        }
        answer = Math.max( answer , Math.abs( nums.get(0) ) ) ;
        
    }
}

