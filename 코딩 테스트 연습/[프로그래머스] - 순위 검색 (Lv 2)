import java.util.*;
class Solution {
    // info 내의 모든 가능한 조합들과 각 조합에 해당되는 점수들을 기록하는 Map
    static Map<String, List<Integer>> hm = new HashMap<>();    
    public int[] solution(String[] info, String[] query) {
        int[] answer = new int[query.length];
        for( int i = 0 ; i < info.length ; i++ ){
            dfs( "" , info[i].split(" ") , 0 );
        }
        for( String key : hm.keySet() ){
            Collections.sort( hm.get( key ) );
        }
        for( int i = 0 ; i < query.length ; i++ ){
            String[] conds = query[i].split(" ");
            String l = "";
            for( int j = 0 ; j < conds.length - 1 ; j++ ){
                if( !conds[j].equals("and") ) {
                    l += conds[j];
                }
            }
            if( hm.containsKey( l ) ){
                answer[ i ] += BinarySearch( hm.get(l) , Integer.parseInt( conds[conds.length - 1]) ); 
            } else {
                answer[ i ] = 0;
            }               
        }        
        return answer;
    }
    // 각각의info에서 각 항목들( 개발언어, 지원직군 등.. )의 가능한 모든 경우의 수를 List에 담는 함수
    static void dfs( String l , String[] info , int depth ){
        if( depth == 4 ){            
            if( !hm.containsKey( l ) ){
                List<Integer> list = new ArrayList<>();
                list.add( Integer.parseInt( info[4] ) );
                hm.put( l , list );
            } else {
                hm.get( l ).add( Integer.parseInt( info[4] ) );
            }
            return;
        }        
        dfs( l + "-" , info , depth + 1 );
        dfs( l + info[depth] , info , depth + 1 );
    }
    // 반복을 통한 이분탐색을 이용해 점수 리스트 중에서 X점 이상 받은 사람의 수를 구하는 함수
    static int BinarySearch( List<Integer> list , int key ){        
        int mid = 0;
        int low = 0;
        int high = list.size() - 1 ; 
        while( low <= high ){
            mid = ( low + high ) / 2 ;
            if( key > list.get( mid ) ) low = mid + 1 ;
            else{
                high = mid - 1;
            }
        }
        return list.size() - low;
    }
}
